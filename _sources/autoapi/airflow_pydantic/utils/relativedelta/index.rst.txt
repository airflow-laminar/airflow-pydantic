airflow_pydantic.utils.relativedelta
====================================

.. py:module:: airflow_pydantic.utils.relativedelta


Attributes
----------

.. autoapisummary::

   airflow_pydantic.utils.relativedelta.Weekday
   airflow_pydantic.utils.relativedelta.RelativeDelta


Classes
-------

.. autoapisummary::

   airflow_pydantic.utils.relativedelta.WeekdayAnnotations
   airflow_pydantic.utils.relativedelta.RelativeDeltaAnnotation


Module Contents
---------------

.. py:class:: WeekdayAnnotations(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Usage docs: https://docs.pydantic.dev/2.10/concepts/models/

   A base class for creating Pydantic models.

   .. attribute:: __class_vars__

      The names of the class variables defined on the model.

   .. attribute:: __private_attributes__

      Metadata about the private attributes of the model.

   .. attribute:: __signature__

      The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

   .. attribute:: __pydantic_complete__

      Whether model building is completed, or if there are still undefined fields.

   .. attribute:: __pydantic_core_schema__

      The core schema of the model.

   .. attribute:: __pydantic_custom_init__

      Whether the model has a custom `__init__` function.

   .. attribute:: __pydantic_decorators__

      Metadata containing the decorators defined on the model.
      This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.

   .. attribute:: __pydantic_generic_metadata__

      Metadata for generic models; contains data used for a similar purpose to
      __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.

   .. attribute:: __pydantic_parent_namespace__

      Parent namespace of the model, used for automatic rebuilding of models.

   .. attribute:: __pydantic_post_init__

      The name of the post-init method for the model, if defined.

   .. attribute:: __pydantic_root_model__

      Whether the model is a [`RootModel`][pydantic.root_model.RootModel].

   .. attribute:: __pydantic_serializer__

      The `pydantic-core` `SchemaSerializer` used to dump instances of the model.

   .. attribute:: __pydantic_validator__

      The `pydantic-core` `SchemaValidator` used to validate instances of the model.

   .. attribute:: __pydantic_fields__

      A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.

   .. attribute:: __pydantic_computed_fields__

      A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

   .. attribute:: __pydantic_extra__

      A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
      is set to `'allow'`.

   .. attribute:: __pydantic_fields_set__

      The names of fields explicitly set during instantiation.

   .. attribute:: __pydantic_private__

      Values of private attributes set on the model instance.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: weekday
      :type:  int
      :value: None



   .. py:attribute:: n
      :type:  int | None
      :value: None



   .. py:method:: _validate(handler: pydantic_core.core_schema.ValidatorFunctionWrapHandler) -> dateutil.relativedelta.relativedelta


   .. py:method:: _serialize() -> dict[str, Any]


.. py:data:: Weekday

.. py:class:: RelativeDeltaAnnotation(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Usage docs: https://docs.pydantic.dev/2.10/concepts/models/

   A base class for creating Pydantic models.

   .. attribute:: __class_vars__

      The names of the class variables defined on the model.

   .. attribute:: __private_attributes__

      Metadata about the private attributes of the model.

   .. attribute:: __signature__

      The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

   .. attribute:: __pydantic_complete__

      Whether model building is completed, or if there are still undefined fields.

   .. attribute:: __pydantic_core_schema__

      The core schema of the model.

   .. attribute:: __pydantic_custom_init__

      Whether the model has a custom `__init__` function.

   .. attribute:: __pydantic_decorators__

      Metadata containing the decorators defined on the model.
      This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.

   .. attribute:: __pydantic_generic_metadata__

      Metadata for generic models; contains data used for a similar purpose to
      __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.

   .. attribute:: __pydantic_parent_namespace__

      Parent namespace of the model, used for automatic rebuilding of models.

   .. attribute:: __pydantic_post_init__

      The name of the post-init method for the model, if defined.

   .. attribute:: __pydantic_root_model__

      Whether the model is a [`RootModel`][pydantic.root_model.RootModel].

   .. attribute:: __pydantic_serializer__

      The `pydantic-core` `SchemaSerializer` used to dump instances of the model.

   .. attribute:: __pydantic_validator__

      The `pydantic-core` `SchemaValidator` used to validate instances of the model.

   .. attribute:: __pydantic_fields__

      A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.

   .. attribute:: __pydantic_computed_fields__

      A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

   .. attribute:: __pydantic_extra__

      A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
      is set to `'allow'`.

   .. attribute:: __pydantic_fields_set__

      The names of fields explicitly set during instantiation.

   .. attribute:: __pydantic_private__

      Values of private attributes set on the model instance.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: years
      :type:  int | None
      :value: None



   .. py:attribute:: months
      :type:  int | None
      :value: None



   .. py:attribute:: days
      :type:  int | None
      :value: None



   .. py:attribute:: hours
      :type:  int | None
      :value: None



   .. py:attribute:: minutes
      :type:  int | None
      :value: None



   .. py:attribute:: seconds
      :type:  int | None
      :value: None



   .. py:attribute:: microseconds
      :type:  int | None
      :value: None



   .. py:attribute:: year
      :type:  int | None
      :value: None



   .. py:attribute:: month
      :type:  Optional[Annotated[int, Field(ge=1, le=12)]]
      :value: None



   .. py:attribute:: day
      :type:  Optional[Annotated[int, Field(ge=0, le=31)]]
      :value: None



   .. py:attribute:: hour
      :type:  Optional[Annotated[int, Field(ge=0, le=23)]]
      :value: None



   .. py:attribute:: minute
      :type:  Optional[Annotated[int, Field(ge=0, le=59)]]
      :value: None



   .. py:attribute:: second
      :type:  Optional[Annotated[int, Field(ge=0, le=59)]]
      :value: None



   .. py:attribute:: microsecond
      :type:  Optional[Annotated[int, Field(ge=0, le=999999)]]
      :value: None



   .. py:attribute:: weekday
      :type:  Weekday | None
      :value: None



   .. py:attribute:: leapdays
      :type:  int | None
      :value: None



   .. py:attribute:: yearday
      :type:  int | None
      :value: None



   .. py:attribute:: nlyearday
      :type:  int | None
      :value: None



   .. py:attribute:: weeks
      :type:  int | None
      :value: None



   .. py:attribute:: dt1
      :type:  int | None
      :value: None



   .. py:attribute:: dt2
      :type:  int | None
      :value: None



   .. py:method:: _validate(handler: pydantic_core.core_schema.ValidatorFunctionWrapHandler) -> dateutil.relativedelta.relativedelta


.. py:data:: RelativeDelta

